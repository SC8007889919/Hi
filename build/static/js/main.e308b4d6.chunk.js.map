{"version":3,"sources":["components/Home.tsx","components/customer/Create.tsx","components/customer/Edit.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Home","props","state","customers","axios","get","then","data","setState","id","delete","index","findIndex","customer","splice","history","push","this","length","className","scope","map","key","first_name","last_name","email","phone","address","description","style","marginBottom","to","onClick","deleteCustomer","React","Create","processFormSubmission","e","preventDefault","loading","formData","submitSuccess","values","post","setTimeout","handleInputChanges","currentTarget","name","value","role","onSubmit","noValidate","htmlFor","type","onChange","placeholder","withRouter","EditCustomer","a","patch","setValues","match","params","defaultValue","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e308b4d6.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\ninterface IState {\r\n    customers: any[];\r\n}\r\n\r\nexport default class Home extends React.Component<RouteComponentProps, IState> {\r\n    constructor(props: RouteComponentProps) {\r\n        super(props);\r\n        this.state = { customers: [] }\r\n    }\r\n    public componentDidMount(): void {\r\n        axios.get(`http://localhost:5000/customers`).then(data => {\r\n            this.setState({ customers: data.data })\r\n        })\r\n    }\r\n    public deleteCustomer(id: number) {\r\n        axios.delete(`http://localhost:5000/customers/${id}`).then(data => {\r\n            const index = this.state.customers.findIndex(customer => customer.id === id);\r\n            this.state.customers.splice(index, 1);\r\n            this.props.history.push('/');\r\n        })\r\n    }\r\n    public render() {\r\n        const customers = this.state.customers;\r\n        return (\r\n            <div>\r\n                {customers.length === 0 && (\r\n                    <div className=\"text-center\">\r\n                        <h2>No customer found at the moment</h2>\r\n                    </div>\r\n                )}\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <table className=\"table table-bordered\">\r\n                            <thead className=\"thead-light\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Firstname</th>\r\n                                    <th scope=\"col\">Lastname</th>\r\n                                    <th scope=\"col\">Email</th>\r\n                                    <th scope=\"col\">Phone</th>\r\n                                    <th scope=\"col\">Address</th>\r\n                                    <th scope=\"col\">Description</th>\r\n                                    <th scope=\"col\">Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {customers && customers.map(customer =>\r\n                                    <tr key={customer.id}>\r\n                                        <td>{customer.first_name}</td>\r\n                                        <td>{customer.last_name}</td>\r\n                                        <td>{customer.email}</td>\r\n                                        <td>{customer.phone}</td>\r\n                                        <td>{customer.address}</td>\r\n                                        <td>{customer.description}</td>\r\n                                        <td>\r\n                                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                                <div className=\"btn-group\" style={{ marginBottom: \"20px\" }}>\r\n                                                    <Link to={`edit/${customer.id}`} className=\"btn btn-sm btn-outline-secondary\">Edit Customer </Link>\r\n                                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.deleteCustomer(customer.id)}>Delete Customer</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport axios from 'axios';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\nexport interface IValues {\r\n    first_name: string,\r\n    last_name: string,\r\n    email: string,\r\n    phone: string,\r\n    address: string,\r\n    description: string,\r\n}\r\nexport interface IFormState {\r\n    [key: string]: any;\r\n    values: IValues[];\r\n    submitSuccess: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nclass Create extends React.Component<RouteComponentProps, IFormState> {\r\n    constructor(props: RouteComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            first_name: '',\r\n            last_name: '',\r\n            email: '',\r\n            phone: '',\r\n            address: '',\r\n            description: '',\r\n            values: [],\r\n            loading: false,\r\n            submitSuccess: false,\r\n        }\r\n    }\r\n    private processFormSubmission = (e: React.FormEvent<HTMLFormElement>): void => {\r\n          e.preventDefault();\r\n          this.setState({ loading: true });\r\n          const formData = {\r\n              first_name: this.state.first_name,\r\n              last_name: this.state.last_name,\r\n              email: this.state.email,\r\n              phone: this.state.phone,\r\n              address: this.state.address,\r\n              description: this.state.description,\r\n          }\r\n          this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\r\n          axios.post(`http://localhost:5000/customers`, formData).then(data => [\r\n              setTimeout(() => {\r\n                  this.props.history.push('/');\r\n              }, 1500)\r\n          ]);\r\n      }\r\n\r\n      private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\r\n          e.preventDefault();\r\n          this.setState({\r\n              [e.currentTarget.name]: e.currentTarget.value,\r\n      })\r\n  }\r\n  public render() {\r\n      const { submitSuccess, loading } = this.state;\r\n      return (\r\n          <div>\r\n              <div className={\"col-md-12 form-wrapper\"}>\r\n                  <h2> Create Post </h2>\r\n                  {!submitSuccess && (\r\n                      <div className=\"alert alert-info\" role=\"alert\">\r\n                          Fill the form below to create a new post\r\n                  </div>\r\n                  )}\r\n                  {submitSuccess && (\r\n                      <div className=\"alert alert-info\" role=\"alert\">\r\n                          The form was successfully submitted!\r\n                          </div>\r\n                  )}\r\n                  <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\r\n                      <div className=\"form-group col-md-12\">\r\n                          <label htmlFor=\"first_name\"> First Name </label>\r\n                          <input type=\"text\" id=\"first_name\" onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter customer's first name\" />\r\n                      </div>\r\n                      <div className=\"form-group col-md-12\">\r\n                          <label htmlFor=\"last_name\"> Last Name </label>\r\n                          <input type=\"text\" id=\"last_name\" onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter customer's last name\" />\r\n                      </div>\r\n                      <div className=\"form-group col-md-12\">\r\n                          <label htmlFor=\"email\"> Email </label>\r\n                          <input type=\"email\" id=\"email\" onChange={(e) => this.handleInputChanges(e)} name=\"email\" className=\"form-control\" placeholder=\"Enter customer's email address\" />\r\n                      </div>\r\n                      <div className=\"form-group col-md-12\">\r\n                          <label htmlFor=\"phone\"> Phone </label>\r\n                          <input type=\"text\" id=\"phone\" onChange={(e) => this.handleInputChanges(e)} name=\"phone\" className=\"form-control\" placeholder=\"Enter customer's phone number\" />\r\n                      </div>\r\n                      <div className=\"form-group col-md-12\">\r\n                          <label htmlFor=\"address\"> Address </label>\r\n                          <input type=\"text\" id=\"address\" onChange={(e) => this.handleInputChanges(e)} name=\"address\" className=\"form-control\" placeholder=\"Enter customer's address\" />\r\n                      </div>\r\n                      <div className=\"form-group col-md-12\">\r\n                          <label htmlFor=\"description\"> Description </label>\r\n                          <input type=\"text\" id=\"description\" onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\r\n                      </div>\r\n                      <div className=\"form-group col-md-4 pull-right\">\r\n                          <button className=\"btn btn-success\" type=\"submit\">\r\n                              Create Customer\r\n                          </button>\r\n                          {loading &&\r\n                              <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                          }\r\n                      </div>\r\n                  </form>\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\nexport default withRouter(Create)","import * as React from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport interface IValues {\r\n    [key: string]: any;\r\n}\r\nexport interface IFormState {\r\n    id: number,\r\n    customer: any;\r\n    values: IValues[];\r\n    submitSuccess: boolean;\r\n    loading: boolean;\r\n}\r\nclass EditCustomer extends React.Component<RouteComponentProps<any>, IFormState> {\r\n    constructor(props: RouteComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            customer: {},\r\n            values: [],\r\n            loading: false,\r\n            submitSuccess: false,\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        axios.get(`http://localhost:5000/customers/${this.state.id}`).then(data => {\r\n            this.setState({ customer: data.data });\r\n        })\r\n    }\r\n\r\n    private processFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n        e.preventDefault();\r\n        this.setState({ loading: true });\r\n        axios.patch(`http://localhost:5000/customers/${this.state.id}`, this.state.values).then(data => {\r\n            this.setState({ submitSuccess: true, loading: false })\r\n            setTimeout(() => {\r\n                this.props.history.push('/');\r\n            }, 1500)\r\n        })\r\n    }\r\n\r\n    private setValues = (values: IValues) => {\r\n        this.setState({ values: { ...this.state.values, ...values } });\r\n    }\r\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        this.setValues({ [e.currentTarget.id]: e.currentTarget.value })\r\n    }\r\n    public render() {\r\n        const { submitSuccess, loading } = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                {this.state.customer &&\r\n                    <div>\r\n                        < h1 > Customer List Management App</h1>\r\n                        <p> Built with React.js and TypeScript </p>\r\n\r\n                        <div>\r\n                            <div className={\"col-md-12 form-wrapper\"}>\r\n                                <h2> Edit Customer </h2>\r\n                                {submitSuccess && (\r\n                                    <div className=\"alert alert-info\" role=\"alert\">\r\n                                        Customer's details has been edited successfully </div>\r\n                                )}\r\n                                <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"first_name\"> First Name </label>\r\n                                        <input type=\"text\" id=\"first_name\" defaultValue={this.state.customer.first_name} onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter customer's first name\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"last_name\"> Last Name </label>\r\n                                        <input type=\"text\" id=\"last_name\" defaultValue={this.state.customer.last_name} onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter customer's last name\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"email\"> Email </label>\r\n                                        <input type=\"email\" id=\"email\" defaultValue={this.state.customer.email} onChange={(e) => this.handleInputChanges(e)} name=\"email\" className=\"form-control\" placeholder=\"Enter customer's email address\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"phone\"> Phone </label>\r\n                                        <input type=\"text\" id=\"phone\" defaultValue={this.state.customer.phone} onChange={(e) => this.handleInputChanges(e)} name=\"phone\" className=\"form-control\" placeholder=\"Enter customer's phone number\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"address\"> Address </label>\r\n                                        <input type=\"text\" id=\"address\" defaultValue={this.state.customer.address} onChange={(e) => this.handleInputChanges(e)} name=\"address\" className=\"form-control\" placeholder=\"Enter customer's address\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"description\"> Description </label>\r\n                                        <input type=\"text\" id=\"description\" defaultValue={this.state.customer.description} onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-4 pull-right\">\r\n                                        <button className=\"btn btn-success\" type=\"submit\">\r\n                                            Edit Customer </button>\r\n                                        {loading &&\r\n                                            <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                                        }\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(EditCustomer)","import * as React from 'react';\r\nimport './App.css';\r\nimport { Switch, Route, withRouter, RouteComponentProps, Link } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport Create from './components/customer/Create';\r\nimport EditCustomer from './components/customer/Edit';\r\n\r\nclass App extends React.Component<RouteComponentProps<any>> {\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to={'/'}> Home </Link>\r\n            </li>\r\n            <li>\r\n              <Link to={'/create'}> Create Customer </Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path={'/'} exact component={Home} />\r\n          <Route path={'/create'} exact component={Create} />\r\n          <Route path={'/edit/:id'} exact component={EditCustomer} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom'; \r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n    , document.getElementById('root')\r\n);\r\nserviceWorker.unregister();"],"sourceRoot":""}